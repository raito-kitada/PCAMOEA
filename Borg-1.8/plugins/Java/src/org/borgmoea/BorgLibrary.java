package org.borgmoea;
import com.sun.jna.Callback;
import com.sun.jna.Function;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;

/**
 * JNA Wrapper for library <b>Borg</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
class BorgLibrary implements Library {
	public static final String JNA_LIBRARY_NAME = "borg";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(BorgLibrary.JNA_LIBRARY_NAME);
	static {
		Native.register(BorgLibrary.JNA_LIBRARY_NAME);
		BorgLibrary.BORG_Random_seed(new NativeLong((int)System.currentTimeMillis()));
	}
	/** enum values */
	public static interface BORG_Dominance {
		/** <i>native declaration : line 81</i> */
		public static final int DOMINATES = -2;
		/** <i>native declaration : line 82</i> */
		public static final int DOMINATES_SAME_BOX = -1;
		/** <i>native declaration : line 83</i> */
		public static final int NONDOMINATED = 0;
		/** <i>native declaration : line 84</i> */
		public static final int DOMINATED_SAME_BOX = 1;
		/** <i>native declaration : line 85</i> */
		public static final int DOMINATED = 2;
	};
	/** enum values */
	public static interface BORG_Restart {
		/** <i>native declaration : line 92</i> */
		public static final int RESTART_DEFAULT = 0;
		/** <i>native declaration : line 93</i> */
		public static final int RESTART_RANDOM = 1;
		/** <i>native declaration : line 94</i> */
		public static final int RESTART_RAMPED = 2;
		/** <i>native declaration : line 95</i> */
		public static final int RESTART_ADAPTIVE = 3;
		/** <i>native declaration : line 96</i> */
		public static final int RESTART_INVERTED = 4;
	};
	/** enum values */
	public static interface BORG_Probabilities {
		/** <i>native declaration : line 103</i> */
		public static final int PROBABILITIES_DEFAULT = 0;
		/** <i>native declaration : line 104</i> */
		public static final int PROBABILITIES_RECENCY = 1;
		/** <i>native declaration : line 105</i> */
		public static final int PROBABILITIES_BOTH = 2;
		/** <i>native declaration : line 106</i> */
		public static final int PROBABILITIES_ADAPTIVE = 3;
	};
	public static final double EPSILON = (double)1e-9;
	public static final String BORG_VERSION = (String)"1.7";
	public static final int BORG_VERSION_NUMBER = (int)106000;
	/** <i>native declaration : line 177</i> */
	public interface BORG_Problem_create_function_callback extends Callback {
		void apply(Pointer doublePtr1, Pointer doublePtr2, Pointer doublePtr3);
	};
	/** <i>native declaration : line 315</i> */
	public interface BORG_Dominance_compound_comparator1_callback extends Callback {
		int apply(Pointer BORG_Solution1, Pointer BORG_Solution2);
	};
	/** <i>native declaration : line 316</i> */
	public interface BORG_Dominance_compound_comparator2_callback extends Callback {
		int apply(Pointer BORG_Solution1, Pointer BORG_Solution2);
	};
	/** <i>native declaration : line 351</i> */
	public interface BORG_Operator_create_function_callback extends Callback {
		void apply(Pointer BORG_Operator1, Pointer BORG_SolutionPtr1, Pointer BORG_SolutionPtr2);
	};
	/**
	 * Prints the copyright and other legal notices to the specified file.<br>
	 * Original signature : <code>void BORG_Copyright(FILE*)</code><br>
	 * <i>native declaration : line 112</i>
	 */
	public static native void BORG_Copyright(BorgLibrary.FILE fp);
	/**
	 * Aborts with an error if the file pointer is invalid.<br>
	 * Original signature : <code>void BORG_Validate_file(FILE*)</code><br>
	 * <i>native declaration : line 117</i>
	 */
	public static native void BORG_Validate_file(BorgLibrary.FILE fp);
	/**
	 * Aborts with an error if the pointer is invalid.<br>
	 * Original signature : <code>void BORG_Validate_pointer(const void*)</code><br>
	 * <i>native declaration : line 122</i>
	 */
	public static native void BORG_Validate_pointer(Pointer ptr);
	/**
	 * Aborts with an error if the index is out of bounds.<br>
	 * Original signature : <code>void BORG_Validate_index(int, int)</code><br>
	 * <i>native declaration : line 127</i>
	 */
	public static native void BORG_Validate_index(int index, int size);
	/**
	 * Aborts with an error if the memory allocation failed.<br>
	 * Original signature : <code>void BORG_Validate_malloc(void*)</code><br>
	 * <i>native declaration : line 132</i>
	 */
	public static native void BORG_Validate_malloc(Pointer ptr);
	/**
	 * Aborts with an error if the argument is negative.<br>
	 * Original signature : <code>void BORG_Validate_positive(double)</code><br>
	 * <i>native declaration : line 137</i>
	 */
	public static native void BORG_Validate_positive(double value);
	/**
	 * Enables the logging of debug statements to stderr.<br>
	 * Original signature : <code>void BORG_Debug_on()</code><br>
	 * <i>native declaration : line 142</i>
	 */
	public static native void BORG_Debug_on();
	/**
	 * Disables the logging of debug statements to stderr.<br>
	 * Original signature : <code>void BORG_Debug_off()</code><br>
	 * <i>native declaration : line 147</i>
	 */
	public static native void BORG_Debug_off();
	/**
	 * Sets the name of this node displayed in the debug output, or<br>
	 * NULL if no name is displayed.<br>
	 * Original signature : <code>void BORG_Debug_set_name(char*)</code><br>
	 * <i>native declaration : line 153</i><br>
	 * @deprecated use the safer methods {@link #BORG_Debug_set_name(java.nio.ByteBuffer)} and {@link #BORG_Debug_set_name(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void BORG_Debug_set_name(Pointer name);
	/**
	 * Sets the name of this node displayed in the debug output, or<br>
	 * NULL if no name is displayed.<br>
	 * Original signature : <code>void BORG_Debug_set_name(char*)</code><br>
	 * <i>native declaration : line 153</i>
	 */
	public static native void BORG_Debug_set_name(ByteBuffer name);
	/**
	 * Displays debugging information.<br>
	 * Original signature : <code>void BORG_Debug(const char*, null)</code><br>
	 * <i>native declaration : line 158</i><br>
	 * @deprecated use the safer methods {@link #BORG_Debug(java.lang.String, java.lang.Object)} and {@link #BORG_Debug(com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	//@Deprecated 
	//public static native void BORG_Debug(Pointer format, Object... varargs);
	/**
	 * Displays debugging information.<br>
	 * Original signature : <code>void BORG_Debug(const char*, null)</code><br>
	 * <i>native declaration : line 158</i>
	 */
	//public static native void BORG_Debug(String format, Object... varargs);
	/**
	 * Original signature : <code>void BORG_Error(const char*, null)</code><br>
	 * <i>native declaration : line 166</i><br>
	 * @deprecated use the safer methods {@link #BORG_Error(java.lang.String, java.lang.Object)} and {@link #BORG_Error(com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	//@Deprecated 
	//public static native void BORG_Error(Pointer format, Object... varargs);
	/**
	 * Original signature : <code>void BORG_Error(const char*, null)</code><br>
	 * <i>native declaration : line 166</i>
	 */
	//public static native void BORG_Error(String format, Object... varargs);
	/**
	 * Creates a new problem with the specified number of decision variables, objectives and<br>
	 * constraints.  The evaluation function for the problem is also provided, which inputs<br>
	 * as arguments the arrays holding the decision variables, objectives and constraints.<br>
	 * Original signature : <code>BORG_Problem BORG_Problem_create(int, int, int, BORG_Problem_create_function_callback*)</code><br>
	 * <i>native declaration : line 173</i>
	 */
	public static native BorgLibrary.BORG_Problem BORG_Problem_create(int numberOfVariables, int numberOfObjectives, int numberOfConstraints, BorgLibrary.BORG_Problem_create_function_callback function);
	/**
	 * Destroys a problem.  No methods may be invoked on the problem after it is destroyed.<br>
	 * Original signature : <code>void BORG_Problem_destroy(BORG_Problem)</code><br>
	 * <i>native declaration : line 182</i><br>
	 * @deprecated use the safer methods {@link #BORG_Problem_destroy(borg.BorgLibrary.BORG_Problem)} and {@link #BORG_Problem_destroy(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void BORG_Problem_destroy(Pointer problem);
	/**
	 * Destroys a problem.  No methods may be invoked on the problem after it is destroyed.<br>
	 * Original signature : <code>void BORG_Problem_destroy(BORG_Problem)</code><br>
	 * <i>native declaration : line 182</i>
	 */
	public static native void BORG_Problem_destroy(BorgLibrary.BORG_Problem problem);
	/**
	 * Sets the epsilon value for the specified objective index.<br>
	 * Original signature : <code>void BORG_Problem_set_epsilon(BORG_Problem, int, double)</code><br>
	 * <i>native declaration : line 187</i><br>
	 * @deprecated use the safer methods {@link #BORG_Problem_set_epsilon(borg.BorgLibrary.BORG_Problem, int, double)} and {@link #BORG_Problem_set_epsilon(com.sun.jna.Pointer, int, double)} instead
	 */
	@Deprecated 
	public static native void BORG_Problem_set_epsilon(Pointer problem, int index, double epsilon);
	/**
	 * Sets the epsilon value for the specified objective index.<br>
	 * Original signature : <code>void BORG_Problem_set_epsilon(BORG_Problem, int, double)</code><br>
	 * <i>native declaration : line 187</i>
	 */
	public static native void BORG_Problem_set_epsilon(BorgLibrary.BORG_Problem problem, int index, double epsilon);
	/**
	 * Sets the objective name for the specified objective index.<br>
	 * Original signature : <code>void BORG_Problem_set_name(BORG_Problem, int, const char*)</code><br>
	 * <i>native declaration : line 192</i><br>
	 * @deprecated use the safer methods {@link #BORG_Problem_set_name(borg.BorgLibrary.BORG_Problem, int, java.lang.String)} and {@link #BORG_Problem_set_name(com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void BORG_Problem_set_name(Pointer problem, int index, Pointer name);
	/**
	 * Sets the objective name for the specified objective index.<br>
	 * Original signature : <code>void BORG_Problem_set_name(BORG_Problem, int, const char*)</code><br>
	 * <i>native declaration : line 192</i>
	 */
	public static native void BORG_Problem_set_name(BorgLibrary.BORG_Problem problem, int index, String name);
	/**
	 * Sets all epsilon values.<br>
	 * Original signature : <code>void BORG_Problem_set_epsilons(BORG_Problem, double*)</code><br>
	 * <i>native declaration : line 197</i><br>
	 * @deprecated use the safer methods {@link #BORG_Problem_set_epsilons(borg.BorgLibrary.BORG_Problem, java.nio.DoubleBuffer)} and {@link #BORG_Problem_set_epsilons(com.sun.jna.Pointer, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	public static native void BORG_Problem_set_epsilons(Pointer problem, DoubleByReference epsilons);
	/**
	 * Sets all epsilon values.<br>
	 * Original signature : <code>void BORG_Problem_set_epsilons(BORG_Problem, double*)</code><br>
	 * <i>native declaration : line 197</i>
	 */
	public static native void BORG_Problem_set_epsilons(BorgLibrary.BORG_Problem problem, DoubleBuffer epsilons);
	/**
	 * Sets the lower and upper bounds for the decision variable specified by the index.<br>
	 * Original signature : <code>void BORG_Problem_set_bounds(BORG_Problem, int, double, double)</code><br>
	 * <i>native declaration : line 202</i><br>
	 * @deprecated use the safer methods {@link #BORG_Problem_set_bounds(borg.BorgLibrary.BORG_Problem, int, double, double)} and {@link #BORG_Problem_set_bounds(com.sun.jna.Pointer, int, double, double)} instead
	 */
	@Deprecated 
	public static native void BORG_Problem_set_bounds(Pointer problem, int index, double lowerBound, double upperBound);
	/**
	 * Sets the lower and upper bounds for the decision variable specified by the index.<br>
	 * Original signature : <code>void BORG_Problem_set_bounds(BORG_Problem, int, double, double)</code><br>
	 * <i>native declaration : line 202</i>
	 */
	public static native void BORG_Problem_set_bounds(BorgLibrary.BORG_Problem problem, int index, double lowerBound, double upperBound);
	/**
	 * Returns the number of decision variables defined by the problem.<br>
	 * Original signature : <code>int BORG_Problem_number_of_variables(BORG_Problem)</code><br>
	 * <i>native declaration : line 207</i><br>
	 * @deprecated use the safer methods {@link #BORG_Problem_number_of_variables(borg.BorgLibrary.BORG_Problem)} and {@link #BORG_Problem_number_of_variables(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Problem_number_of_variables(Pointer problem);
	/**
	 * Returns the number of decision variables defined by the problem.<br>
	 * Original signature : <code>int BORG_Problem_number_of_variables(BORG_Problem)</code><br>
	 * <i>native declaration : line 207</i>
	 */
	public static native int BORG_Problem_number_of_variables(BorgLibrary.BORG_Problem problem);
	/**
	 * Returns the number of objectives defined by the problem.<br>
	 * Original signature : <code>int BORG_Problem_number_of_objectives(BORG_Problem)</code><br>
	 * <i>native declaration : line 212</i><br>
	 * @deprecated use the safer methods {@link #BORG_Problem_number_of_objectives(borg.BorgLibrary.BORG_Problem)} and {@link #BORG_Problem_number_of_objectives(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Problem_number_of_objectives(Pointer problem);
	/**
	 * Returns the number of objectives defined by the problem.<br>
	 * Original signature : <code>int BORG_Problem_number_of_objectives(BORG_Problem)</code><br>
	 * <i>native declaration : line 212</i>
	 */
	public static native int BORG_Problem_number_of_objectives(BorgLibrary.BORG_Problem problem);
	/**
	 * Returns the number of constraints defined by the problem.<br>
	 * Original signature : <code>int BORG_Problem_number_of_constraints(BORG_Problem)</code><br>
	 * <i>native declaration : line 217</i><br>
	 * @deprecated use the safer methods {@link #BORG_Problem_number_of_constraints(borg.BorgLibrary.BORG_Problem)} and {@link #BORG_Problem_number_of_constraints(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Problem_number_of_constraints(Pointer problem);
	/**
	 * Returns the number of constraints defined by the problem.<br>
	 * Original signature : <code>int BORG_Problem_number_of_constraints(BORG_Problem)</code><br>
	 * <i>native declaration : line 217</i>
	 */
	public static native int BORG_Problem_number_of_constraints(BorgLibrary.BORG_Problem problem);
	/**
	 * Creates a new, uninitialized solution for the specified problem.<br>
	 * Original signature : <code>BORG_Solution BORG_Solution_create(BORG_Problem)</code><br>
	 * <i>native declaration : line 222</i><br>
	 * @deprecated use the safer methods {@link #BORG_Solution_create(borg.BorgLibrary.BORG_Problem)} and {@link #BORG_Solution_create(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native BorgLibrary.BORG_Solution BORG_Solution_create(Pointer problem);
	/**
	 * Creates a new, uninitialized solution for the specified problem.<br>
	 * Original signature : <code>BORG_Solution BORG_Solution_create(BORG_Problem)</code><br>
	 * <i>native declaration : line 222</i>
	 */
	public static native BorgLibrary.BORG_Solution BORG_Solution_create(BorgLibrary.BORG_Problem problem);
	/**
	 * Destroys a solution.  No methods may be invoked on the solution after it is destroyed.<br>
	 * Original signature : <code>void BORG_Solution_destroy(BORG_Solution)</code><br>
	 * <i>native declaration : line 227</i><br>
	 * @deprecated use the safer methods {@link #BORG_Solution_destroy(borg.BorgLibrary.BORG_Solution)} and {@link #BORG_Solution_destroy(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void BORG_Solution_destroy(Pointer solution);
	/**
	 * Destroys a solution.  No methods may be invoked on the solution after it is destroyed.<br>
	 * Original signature : <code>void BORG_Solution_destroy(BORG_Solution)</code><br>
	 * <i>native declaration : line 227</i>
	 */
	public static native void BORG_Solution_destroy(BorgLibrary.BORG_Solution solution);
	/**
	 * Returns a clone of the specified solution.  The cloned solution represents the same value<br>
	 * as the original solution, but occupies a new memory location.<br>
	 * Original signature : <code>BORG_Solution BORG_Solution_clone(BORG_Solution)</code><br>
	 * <i>native declaration : line 233</i><br>
	 * @deprecated use the safer methods {@link #BORG_Solution_clone(borg.BorgLibrary.BORG_Solution)} and {@link #BORG_Solution_clone(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native BorgLibrary.BORG_Solution BORG_Solution_clone(Pointer original);
	/**
	 * Returns a clone of the specified solution.  The cloned solution represents the same value<br>
	 * as the original solution, but occupies a new memory location.<br>
	 * Original signature : <code>BORG_Solution BORG_Solution_clone(BORG_Solution)</code><br>
	 * <i>native declaration : line 233</i>
	 */
	public static native BorgLibrary.BORG_Solution BORG_Solution_clone(BorgLibrary.BORG_Solution original);
	/**
	 * Returns the decision variable value at the specified index for the given solution.<br>
	 * Original signature : <code>double BORG_Solution_get_variable(BORG_Solution, int)</code><br>
	 * <i>native declaration : line 238</i><br>
	 * @deprecated use the safer methods {@link #BORG_Solution_get_variable(borg.BorgLibrary.BORG_Solution, int)} and {@link #BORG_Solution_get_variable(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native double BORG_Solution_get_variable(Pointer solution, int index);
	/**
	 * Returns the decision variable value at the specified index for the given solution.<br>
	 * Original signature : <code>double BORG_Solution_get_variable(BORG_Solution, int)</code><br>
	 * <i>native declaration : line 238</i>
	 */
	public static native double BORG_Solution_get_variable(BorgLibrary.BORG_Solution solution, int index);
	/**
	 * Returns the objective value at the specified index for the given solution.<br>
	 * Original signature : <code>double BORG_Solution_get_objective(BORG_Solution, int)</code><br>
	 * <i>native declaration : line 243</i><br>
	 * @deprecated use the safer methods {@link #BORG_Solution_get_objective(borg.BorgLibrary.BORG_Solution, int)} and {@link #BORG_Solution_get_objective(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native double BORG_Solution_get_objective(Pointer solution, int index);
	/**
	 * Returns the objective value at the specified index for the given solution.<br>
	 * Original signature : <code>double BORG_Solution_get_objective(BORG_Solution, int)</code><br>
	 * <i>native declaration : line 243</i>
	 */
	public static native double BORG_Solution_get_objective(BorgLibrary.BORG_Solution solution, int index);
	/**
	 * Returns the constraint value at the specified index for the given solution.<br>
	 * Original signature : <code>double BORG_Solution_get_constraint(BORG_Solution, int)</code><br>
	 * <i>native declaration : line 248</i><br>
	 * @deprecated use the safer methods {@link #BORG_Solution_get_constraint(borg.BorgLibrary.BORG_Solution, int)} and {@link #BORG_Solution_get_constraint(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native double BORG_Solution_get_constraint(Pointer solution, int index);
	/**
	 * Returns the constraint value at the specified index for the given solution.<br>
	 * Original signature : <code>double BORG_Solution_get_constraint(BORG_Solution, int)</code><br>
	 * <i>native declaration : line 248</i>
	 */
	public static native double BORG_Solution_get_constraint(BorgLibrary.BORG_Solution solution, int index);
	/**
	 * Sets the value of the decision variable specified by the index.<br>
	 * Original signature : <code>void BORG_Solution_set_variable(BORG_Solution, int, double)</code><br>
	 * <i>native declaration : line 253</i><br>
	 * @deprecated use the safer methods {@link #BORG_Solution_set_variable(borg.BorgLibrary.BORG_Solution, int, double)} and {@link #BORG_Solution_set_variable(com.sun.jna.Pointer, int, double)} instead
	 */
	@Deprecated 
	public static native void BORG_Solution_set_variable(Pointer solution, int index, double value);
	/**
	 * Sets the value of the decision variable specified by the index.<br>
	 * Original signature : <code>void BORG_Solution_set_variable(BORG_Solution, int, double)</code><br>
	 * <i>native declaration : line 253</i>
	 */
	public static native void BORG_Solution_set_variable(BorgLibrary.BORG_Solution solution, int index, double value);
	/**
	 * Sets the value of all decision variables.<br>
	 * Original signature : <code>void BORG_Solution_set_variables(BORG_Solution, double*)</code><br>
	 * <i>native declaration : line 258</i><br>
	 * @deprecated use the safer methods {@link #BORG_Solution_set_variables(borg.BorgLibrary.BORG_Solution, java.nio.DoubleBuffer)} and {@link #BORG_Solution_set_variables(com.sun.jna.Pointer, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	public static native void BORG_Solution_set_variables(Pointer solution, DoubleByReference variables);
	/**
	 * Sets the value of all decision variables.<br>
	 * Original signature : <code>void BORG_Solution_set_variables(BORG_Solution, double*)</code><br>
	 * <i>native declaration : line 258</i>
	 */
	public static native void BORG_Solution_set_variables(BorgLibrary.BORG_Solution solution, DoubleBuffer variables);
	/**
	 * Returns the optimization problem associated with this solution.<br>
	 * Original signature : <code>BORG_Problem BORG_Solution_get_problem(BORG_Solution)</code><br>
	 * <i>native declaration : line 263</i><br>
	 * @deprecated use the safer methods {@link #BORG_Solution_get_problem(borg.BorgLibrary.BORG_Solution)} and {@link #BORG_Solution_get_problem(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native BorgLibrary.BORG_Problem BORG_Solution_get_problem(Pointer solution);
	/**
	 * Returns the optimization problem associated with this solution.<br>
	 * Original signature : <code>BORG_Problem BORG_Solution_get_problem(BORG_Solution)</code><br>
	 * <i>native declaration : line 263</i>
	 */
	public static native BorgLibrary.BORG_Problem BORG_Solution_get_problem(BorgLibrary.BORG_Solution solution);
	/**
	 * Evaluates the solution, assigning all objectives and constraints.<br>
	 * Original signature : <code>void BORG_Solution_evaluate(BORG_Solution)</code><br>
	 * <i>native declaration : line 268</i><br>
	 * @deprecated use the safer methods {@link #BORG_Solution_evaluate(borg.BorgLibrary.BORG_Solution)} and {@link #BORG_Solution_evaluate(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void BORG_Solution_evaluate(Pointer solution);
	/**
	 * Evaluates the solution, assigning all objectives and constraints.<br>
	 * Original signature : <code>void BORG_Solution_evaluate(BORG_Solution)</code><br>
	 * <i>native declaration : line 268</i>
	 */
	public static native void BORG_Solution_evaluate(BorgLibrary.BORG_Solution solution);
	/**
	 * Prints the specified solution to a file stream.<br>
	 * Original signature : <code>void BORG_Solution_print(BORG_Solution, FILE*)</code><br>
	 * <i>native declaration : line 273</i><br>
	 * @deprecated use the safer methods {@link #BORG_Solution_print(borg.BorgLibrary.BORG_Solution, borg.BorgLibrary.FILE)} and {@link #BORG_Solution_print(com.sun.jna.Pointer, borg.BorgLibrary.FILE)} instead
	 */
	@Deprecated 
	public static native void BORG_Solution_print(Pointer solution, BorgLibrary.FILE fp);
	/**
	 * Prints the specified solution to a file stream.<br>
	 * Original signature : <code>void BORG_Solution_print(BORG_Solution, FILE*)</code><br>
	 * <i>native declaration : line 273</i>
	 */
	public static native void BORG_Solution_print(BorgLibrary.BORG_Solution solution, BorgLibrary.FILE fp);
	/**
	 * Randomly initializes the decision variables of the specified solution.<br>
	 * Original signature : <code>void BORG_Solution_initialize(BORG_Solution)</code><br>
	 * <i>native declaration : line 278</i><br>
	 * @deprecated use the safer methods {@link #BORG_Solution_initialize(borg.BorgLibrary.BORG_Solution)} and {@link #BORG_Solution_initialize(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void BORG_Solution_initialize(Pointer solution);
	/**
	 * Randomly initializes the decision variables of the specified solution.<br>
	 * Original signature : <code>void BORG_Solution_initialize(BORG_Solution)</code><br>
	 * <i>native declaration : line 278</i>
	 */
	public static native void BORG_Solution_initialize(BorgLibrary.BORG_Solution solution);
	/**
	 * Returns true if the solution violates any constraints; false otherwise.<br>
	 * Original signature : <code>int BORG_Solution_violates_constraints(BORG_Solution)</code><br>
	 * <i>native declaration : line 283</i><br>
	 * @deprecated use the safer methods {@link #BORG_Solution_violates_constraints(borg.BorgLibrary.BORG_Solution)} and {@link #BORG_Solution_violates_constraints(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Solution_violates_constraints(Pointer solution);
	/**
	 * Returns true if the solution violates any constraints; false otherwise.<br>
	 * Original signature : <code>int BORG_Solution_violates_constraints(BORG_Solution)</code><br>
	 * <i>native declaration : line 283</i>
	 */
	public static native int BORG_Solution_violates_constraints(BorgLibrary.BORG_Solution solution);
	/**
	 * Returns DOMINATES if solution1 Pareto dominates solution2; DOMINATED if solution2<br>
	 * Pareto dominates solution1; or NONDOMINATED otherwise.<br>
	 * Original signature : <code>BORG_Dominance BORG_Dominance_pareto(BORG_Solution, BORG_Solution)</code><br>
	 * <i>native declaration : line 289</i><br>
	 * @deprecated use the safer methods {@link #BORG_Dominance_pareto(borg.BorgLibrary.BORG_Solution, borg.BorgLibrary.BORG_Solution)} and {@link #BORG_Dominance_pareto(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Dominance_pareto(Pointer solution1, Pointer solution2);
	/**
	 * Returns DOMINATES if solution1 Pareto dominates solution2; DOMINATED if solution2<br>
	 * Pareto dominates solution1; or NONDOMINATED otherwise.<br>
	 * Original signature : <code>BORG_Dominance BORG_Dominance_pareto(BORG_Solution, BORG_Solution)</code><br>
	 * <i>native declaration : line 289</i>
	 */
	public static native int BORG_Dominance_pareto(BorgLibrary.BORG_Solution solution1, BorgLibrary.BORG_Solution solution2);
	/**
	 * Returns DOMINATES if the epsilon-box vector of solution1 Pareto dominates solution2;<br>
	 * DOMINATED if the epsilon-box vector of solution2 Pareto dominates solution1;<br>
	 * DOMINATES_SAME_BOX if solution1 and solution2 reside in the same epsilon-box but solution1<br>
	 * is nearer to the optimal corner; DOMINATED_SAME_BOX if solution1 and solution2 reside in<br>
	 * the same epsilon-box but solution2 is nearer to the optimal corner; or NONDOMINATED<br>
	 * otherwise.<br>
	 * Original signature : <code>BORG_Dominance BORG_Dominance_epsilon(BORG_Solution, BORG_Solution)</code><br>
	 * <i>native declaration : line 299</i><br>
	 * @deprecated use the safer methods {@link #BORG_Dominance_epsilon(borg.BorgLibrary.BORG_Solution, borg.BorgLibrary.BORG_Solution)} and {@link #BORG_Dominance_epsilon(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Dominance_epsilon(Pointer solution1, Pointer solution2);
	/**
	 * Returns DOMINATES if the epsilon-box vector of solution1 Pareto dominates solution2;<br>
	 * DOMINATED if the epsilon-box vector of solution2 Pareto dominates solution1;<br>
	 * DOMINATES_SAME_BOX if solution1 and solution2 reside in the same epsilon-box but solution1<br>
	 * is nearer to the optimal corner; DOMINATED_SAME_BOX if solution1 and solution2 reside in<br>
	 * the same epsilon-box but solution2 is nearer to the optimal corner; or NONDOMINATED<br>
	 * otherwise.<br>
	 * Original signature : <code>BORG_Dominance BORG_Dominance_epsilon(BORG_Solution, BORG_Solution)</code><br>
	 * <i>native declaration : line 299</i>
	 */
	public static native int BORG_Dominance_epsilon(BorgLibrary.BORG_Solution solution1, BorgLibrary.BORG_Solution solution2);
	/**
	 * Returns DOMINATES if the aggregate constraint violation of solution1 is less than solution2;<br>
	 * DOMINATED if the aggregate constraint violation of solution2 is less than solution2; or<br>
	 * NONDOMINATED if solution1 and solution2 share equal aggregate constraint violations.<br>
	 * Original signature : <code>BORG_Dominance BORG_Dominance_constraints(BORG_Solution, BORG_Solution)</code><br>
	 * <i>native declaration : line 306</i><br>
	 * @deprecated use the safer methods {@link #BORG_Dominance_constraints(borg.BorgLibrary.BORG_Solution, borg.BorgLibrary.BORG_Solution)} and {@link #BORG_Dominance_constraints(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Dominance_constraints(Pointer solution1, Pointer solution2);
	/**
	 * Returns DOMINATES if the aggregate constraint violation of solution1 is less than solution2;<br>
	 * DOMINATED if the aggregate constraint violation of solution2 is less than solution2; or<br>
	 * NONDOMINATED if solution1 and solution2 share equal aggregate constraint violations.<br>
	 * Original signature : <code>BORG_Dominance BORG_Dominance_constraints(BORG_Solution, BORG_Solution)</code><br>
	 * <i>native declaration : line 306</i>
	 */
	public static native int BORG_Dominance_constraints(BorgLibrary.BORG_Solution solution1, BorgLibrary.BORG_Solution solution2);
	/**
	 * Applies two dominance checks consecuatively, returning the result of the first if is not<br>
	 * NONDOMINATED; otherwise the result of the second dominance check is returned.<br>
	 * Original signature : <code>BORG_Dominance BORG_Dominance_compound(BORG_Solution, BORG_Solution, BORG_Dominance_compound_comparator1_callback*, BORG_Dominance_compound_comparator2_callback*)</code><br>
	 * <i>native declaration : line 312</i><br>
	 * @deprecated use the safer methods {@link #BORG_Dominance_compound(borg.BorgLibrary.BORG_Solution, borg.BorgLibrary.BORG_Solution, borg.BorgLibrary.BORG_Dominance_compound_comparator1_callback, borg.BorgLibrary.BORG_Dominance_compound_comparator2_callback)} and {@link #BORG_Dominance_compound(com.sun.jna.Pointer, com.sun.jna.Pointer, borg.BorgLibrary.BORG_Dominance_compound_comparator1_callback, borg.BorgLibrary.BORG_Dominance_compound_comparator2_callback)} instead
	 */
	@Deprecated 
	public static native int BORG_Dominance_compound(Pointer solution1, Pointer solution2, BorgLibrary.BORG_Dominance_compound_comparator1_callback comparator1, BorgLibrary.BORG_Dominance_compound_comparator2_callback comparator2);
	/**
	 * Applies two dominance checks consecuatively, returning the result of the first if is not<br>
	 * NONDOMINATED; otherwise the result of the second dominance check is returned.<br>
	 * Original signature : <code>BORG_Dominance BORG_Dominance_compound(BORG_Solution, BORG_Solution, BORG_Dominance_compound_comparator1_callback*, BORG_Dominance_compound_comparator2_callback*)</code><br>
	 * <i>native declaration : line 312</i>
	 */
	public static native int BORG_Dominance_compound(BorgLibrary.BORG_Solution solution1, BorgLibrary.BORG_Solution solution2, BorgLibrary.BORG_Dominance_compound_comparator1_callback comparator1, BorgLibrary.BORG_Dominance_compound_comparator2_callback comparator2);
	/**
	 * Seeds the internal pseudo-random number generator with the specified seed.<br>
	 * Original signature : <code>void BORG_Random_seed(unsigned long)</code><br>
	 * <i>native declaration : line 321</i>
	 */
	public static native void BORG_Random_seed(NativeLong seed);
	/**
	 * Returns a random number sampled uniformly from within the specified lower and upper<br>
	 * bounds, inclusively.<br>
	 * Original signature : <code>double BORG_Random_uniform(double, double)</code><br>
	 * <i>native declaration : line 327</i>
	 */
	public static native double BORG_Random_uniform(double lowerBound, double upperBound);
	/**
	 * Returns a random integer sampled uniformly from the range [0, n).<br>
	 * Original signature : <code>int BORG_Random_int(int)</code><br>
	 * <i>native declaration : line 332</i>
	 */
	public static native int BORG_Random_int(int n);
	/**
	 * Returns a random number sampled from a Gaussian (normal) distribution with the specified<br>
	 * mean and standard deviation.<br>
	 * Original signature : <code>double BORG_Random_gaussian(double, double)</code><br>
	 * <i>native declaration : line 338</i>
	 */
	public static native double BORG_Random_gaussian(double mean, double stdev);
	/**
	 * Creates a new operator with the specified number of parents, offspring and parameters.<br>
	 * Also specified is the function for performing the operation, which inputs as arguments<br>
	 * a reference to this operator, an array containing the parent solutions,<br>
	 * and an array to store the resulting offspring.<br>
	 * Original signature : <code>BORG_Operator BORG_Operator_create(const char*, int, int, int, BORG_Operator_create_function_callback*)</code><br>
	 * <i>native declaration : line 346</i><br>
	 * @deprecated use the safer methods {@link #BORG_Operator_create(java.lang.String, int, int, int, borg.BorgLibrary.BORG_Operator_create_function_callback)} and {@link #BORG_Operator_create(com.sun.jna.Pointer, int, int, int, borg.BorgLibrary.BORG_Operator_create_function_callback)} instead
	 */
	@Deprecated 
	public static native BorgLibrary.BORG_Operator BORG_Operator_create(Pointer name, int numberOfParents, int numberOfOffspring, int numberOfParameters, BorgLibrary.BORG_Operator_create_function_callback function);
	/**
	 * Creates a new operator with the specified number of parents, offspring and parameters.<br>
	 * Also specified is the function for performing the operation, which inputs as arguments<br>
	 * a reference to this operator, an array containing the parent solutions,<br>
	 * and an array to store the resulting offspring.<br>
	 * Original signature : <code>BORG_Operator BORG_Operator_create(const char*, int, int, int, BORG_Operator_create_function_callback*)</code><br>
	 * <i>native declaration : line 346</i>
	 */
	public static native BorgLibrary.BORG_Operator BORG_Operator_create(String name, int numberOfParents, int numberOfOffspring, int numberOfParameters, BorgLibrary.BORG_Operator_create_function_callback function);
	
	public static native BorgLibrary.BORG_Operator BORG_Operator_create(String name, int numberOfParents, int numberOfOffspring, int numberOfParameters, Function function);
	/**
	 * Destroys an operator.  No methods may be invoked on an operator after it is destroyed.<br>
	 * Original signature : <code>void BORG_Operator_destroy(BORG_Operator)</code><br>
	 * <i>native declaration : line 356</i><br>
	 * @deprecated use the safer methods {@link #BORG_Operator_destroy(borg.BorgLibrary.BORG_Operator)} and {@link #BORG_Operator_destroy(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void BORG_Operator_destroy(Pointer variation);
	/**
	 * Destroys an operator.  No methods may be invoked on an operator after it is destroyed.<br>
	 * Original signature : <code>void BORG_Operator_destroy(BORG_Operator)</code><br>
	 * <i>native declaration : line 356</i>
	 */
	public static native void BORG_Operator_destroy(BorgLibrary.BORG_Operator variation);
	/**
	 * Returns the selection probability of the given operator.<br>
	 * Original signature : <code>double BORG_Operator_get_probability(BORG_Operator)</code><br>
	 * <i>native declaration : line 361</i><br>
	 * @deprecated use the safer methods {@link #BORG_Operator_get_probability(borg.BorgLibrary.BORG_Operator)} and {@link #BORG_Operator_get_probability(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native double BORG_Operator_get_probability(Pointer variation);
	/**
	 * Returns the selection probability of the given operator.<br>
	 * Original signature : <code>double BORG_Operator_get_probability(BORG_Operator)</code><br>
	 * <i>native declaration : line 361</i>
	 */
	public static native double BORG_Operator_get_probability(BorgLibrary.BORG_Operator variation);
	/**
	 * Sets the value of the parameter specified by the index.<br>
	 * Original signature : <code>void BORG_Operator_set_parameter(BORG_Operator, int, double)</code><br>
	 * <i>native declaration : line 366</i><br>
	 * @deprecated use the safer methods {@link #BORG_Operator_set_parameter(borg.BorgLibrary.BORG_Operator, int, double)} and {@link #BORG_Operator_set_parameter(com.sun.jna.Pointer, int, double)} instead
	 */
	@Deprecated 
	public static native void BORG_Operator_set_parameter(Pointer variation, int index, double parameter);
	/**
	 * Sets the value of the parameter specified by the index.<br>
	 * Original signature : <code>void BORG_Operator_set_parameter(BORG_Operator, int, double)</code><br>
	 * <i>native declaration : line 366</i>
	 */
	public static native void BORG_Operator_set_parameter(BorgLibrary.BORG_Operator variation, int index, double parameter);
	/**
	 * Sets all parameter values for the specified operator.<br>
	 * Original signature : <code>void BORG_Operator_set_parameters(BORG_Operator, double*)</code><br>
	 * <i>native declaration : line 371</i><br>
	 * @deprecated use the safer methods {@link #BORG_Operator_set_parameters(borg.BorgLibrary.BORG_Operator, java.nio.DoubleBuffer)} and {@link #BORG_Operator_set_parameters(com.sun.jna.Pointer, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	public static native void BORG_Operator_set_parameters(Pointer variation, DoubleByReference parameters);
	/**
	 * Sets all parameter values for the specified operator.<br>
	 * Original signature : <code>void BORG_Operator_set_parameters(BORG_Operator, double*)</code><br>
	 * <i>native declaration : line 371</i>
	 */
	public static native void BORG_Operator_set_parameters(BorgLibrary.BORG_Operator variation, DoubleBuffer parameters);
	/**
	 * Returns the number of offspring produced by the specified operator.<br>
	 * Original signature : <code>int BORG_Operator_get_number_of_offspring(BORG_Operator)</code><br>
	 * <i>native declaration : line 376</i><br>
	 * @deprecated use the safer methods {@link #BORG_Operator_get_number_of_offspring(borg.BorgLibrary.BORG_Operator)} and {@link #BORG_Operator_get_number_of_offspring(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Operator_get_number_of_offspring(Pointer variation);
	/**
	 * Returns the number of offspring produced by the specified operator.<br>
	 * Original signature : <code>int BORG_Operator_get_number_of_offspring(BORG_Operator)</code><br>
	 * <i>native declaration : line 376</i>
	 */
	public static native int BORG_Operator_get_number_of_offspring(BorgLibrary.BORG_Operator variation);
	/**
	 * Returns the number of parents required by the specified operator.<br>
	 * Original signature : <code>int BORG_Operator_get_number_of_parents(BORG_Operator)</code><br>
	 * <i>native declaration : line 381</i><br>
	 * @deprecated use the safer methods {@link #BORG_Operator_get_number_of_parents(borg.BorgLibrary.BORG_Operator)} and {@link #BORG_Operator_get_number_of_parents(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Operator_get_number_of_parents(Pointer variation);
	/**
	 * Returns the number of parents required by the specified operator.<br>
	 * Original signature : <code>int BORG_Operator_get_number_of_parents(BORG_Operator)</code><br>
	 * <i>native declaration : line 381</i>
	 */
	public static native int BORG_Operator_get_number_of_parents(BorgLibrary.BORG_Operator variation);
	/**
	 * Sets an additional mutation operator which is applied to each individual offspring.<br>
	 * Original signature : <code>void BORG_Operator_set_mutation(BORG_Operator, BORG_Operator)</code><br>
	 * <i>native declaration : line 386</i><br>
	 * @deprecated use the safer methods {@link #BORG_Operator_set_mutation(borg.BorgLibrary.BORG_Operator, borg.BorgLibrary.BORG_Operator)} and {@link #BORG_Operator_set_mutation(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void BORG_Operator_set_mutation(Pointer variation, Pointer mutation);
	/**
	 * Sets an additional mutation operator which is applied to each individual offspring.<br>
	 * Original signature : <code>void BORG_Operator_set_mutation(BORG_Operator, BORG_Operator)</code><br>
	 * <i>native declaration : line 386</i>
	 */
	public static native void BORG_Operator_set_mutation(BorgLibrary.BORG_Operator variation, BorgLibrary.BORG_Operator mutation);
	/**
	 * Applies the specified variation operator and its optional mutation to the parents, filling the<br>
	 * offspring array with the result of the operator.<br>
	 * Original signature : <code>void BORG_Operator_apply(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 392</i><br>
	 * @deprecated use the safer methods {@link #BORG_Operator_apply(borg.BorgLibrary.BORG_Operator, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #BORG_Operator_apply(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	public static native void BORG_Operator_apply(Pointer variation, Pointer parents, Pointer offspring);
	/**
	 * Applies the specified variation operator and its optional mutation to the parents, filling the<br>
	 * offspring array with the result of the operator.<br>
	 * Original signature : <code>void BORG_Operator_apply(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 392</i>
	 */
	public static native void BORG_Operator_apply(BorgLibrary.BORG_Operator variation, PointerByReference parents, PointerByReference offspring);
	/**
	 * Applies the specified variation operator and its optional mutation to the parents, filling the<br>
	 * offspring array with the result of the operator.<br>
	 * Original signature : <code>void BORG_Operator_apply(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 392</i>
	 */
	public static native void BORG_Operator_apply(Pointer variation, PointerByReference parents, PointerByReference offspring);
	/**
	 * The uniform mutation operator.<br>
	 * Original signature : <code>void BORG_Operator_UM(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 397</i><br>
	 * @deprecated use the safer methods {@link #BORG_Operator_UM(borg.BorgLibrary.BORG_Operator, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #BORG_Operator_UM(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	public static native void BORG_Operator_UM(Pointer um, Pointer parents, Pointer offspring);
	/**
	 * The uniform mutation operator.<br>
	 * Original signature : <code>void BORG_Operator_UM(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 397</i>
	 */
	public static native void BORG_Operator_UM(BorgLibrary.BORG_Operator um, PointerByReference parents, PointerByReference offspring);
	/**
	 * The uniform mutation operator.<br>
	 * Original signature : <code>void BORG_Operator_UM(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 397</i>
	 */
	public static native void BORG_Operator_UM(Pointer um, PointerByReference parents, PointerByReference offspring);
	/**
	 * The simulated binary crossover operator.<br>
	 * Original signature : <code>void BORG_Operator_SBX(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 402</i><br>
	 * @deprecated use the safer methods {@link #BORG_Operator_SBX(borg.BorgLibrary.BORG_Operator, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #BORG_Operator_SBX(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	public static native void BORG_Operator_SBX(Pointer sbx, Pointer parents, Pointer offspring);
	/**
	 * The simulated binary crossover operator.<br>
	 * Original signature : <code>void BORG_Operator_SBX(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 402</i>
	 */
	public static native void BORG_Operator_SBX(BorgLibrary.BORG_Operator sbx, PointerByReference parents, PointerByReference offspring);
	/**
	 * The simulated binary crossover operator.<br>
	 * Original signature : <code>void BORG_Operator_SBX(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 402</i>
	 */
	public static native void BORG_Operator_SBX(Pointer sbx, PointerByReference parents, PointerByReference offspring);
	/**
	 * The polynomial mutation operator.<br>
	 * Original signature : <code>void BORG_Operator_PM(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 407</i><br>
	 * @deprecated use the safer methods {@link #BORG_Operator_PM(borg.BorgLibrary.BORG_Operator, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #BORG_Operator_PM(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	public static native void BORG_Operator_PM(Pointer pm, Pointer parents, Pointer offspring);
	/**
	 * The polynomial mutation operator.<br>
	 * Original signature : <code>void BORG_Operator_PM(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 407</i>
	 */
	public static native void BORG_Operator_PM(BorgLibrary.BORG_Operator pm, PointerByReference parents, PointerByReference offspring);
	/**
	 * The polynomial mutation operator.<br>
	 * Original signature : <code>void BORG_Operator_PM(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 407</i>
	 */
	public static native void BORG_Operator_PM(Pointer pm, PointerByReference parents, PointerByReference offspring);
	/**
	 * The differential evolution operator.<br>
	 * Original signature : <code>void BORG_Operator_DE(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 412</i><br>
	 * @deprecated use the safer methods {@link #BORG_Operator_DE(borg.BorgLibrary.BORG_Operator, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #BORG_Operator_DE(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	public static native void BORG_Operator_DE(Pointer de, Pointer parents, Pointer offspring);
	/**
	 * The differential evolution operator.<br>
	 * Original signature : <code>void BORG_Operator_DE(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 412</i>
	 */
	public static native void BORG_Operator_DE(BorgLibrary.BORG_Operator de, PointerByReference parents, PointerByReference offspring);
	/**
	 * The differential evolution operator.<br>
	 * Original signature : <code>void BORG_Operator_DE(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 412</i>
	 */
	public static native void BORG_Operator_DE(Pointer de, PointerByReference parents, PointerByReference offspring);
	/**
	 * The simplex crossover operator.<br>
	 * Original signature : <code>void BORG_Operator_SPX(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 417</i><br>
	 * @deprecated use the safer methods {@link #BORG_Operator_SPX(borg.BorgLibrary.BORG_Operator, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #BORG_Operator_SPX(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	public static native void BORG_Operator_SPX(Pointer spx, Pointer parents, Pointer offspring);
	/**
	 * The simplex crossover operator.<br>
	 * Original signature : <code>void BORG_Operator_SPX(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 417</i>
	 */
	public static native void BORG_Operator_SPX(BorgLibrary.BORG_Operator spx, PointerByReference parents, PointerByReference offspring);
	/**
	 * The simplex crossover operator.<br>
	 * Original signature : <code>void BORG_Operator_SPX(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 417</i>
	 */
	public static native void BORG_Operator_SPX(Pointer spx, PointerByReference parents, PointerByReference offspring);
	/**
	 * The parent centric crossover operator.<br>
	 * Original signature : <code>void BORG_Operator_PCX(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 422</i><br>
	 * @deprecated use the safer methods {@link #BORG_Operator_PCX(borg.BorgLibrary.BORG_Operator, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #BORG_Operator_PCX(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	public static native void BORG_Operator_PCX(Pointer pcx, Pointer parents, Pointer offspring);
	/**
	 * The parent centric crossover operator.<br>
	 * Original signature : <code>void BORG_Operator_PCX(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 422</i>
	 */
	public static native void BORG_Operator_PCX(BorgLibrary.BORG_Operator pcx, PointerByReference parents, PointerByReference offspring);
	/**
	 * The parent centric crossover operator.<br>
	 * Original signature : <code>void BORG_Operator_PCX(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 422</i>
	 */
	public static native void BORG_Operator_PCX(Pointer pcx, PointerByReference parents, PointerByReference offspring);
	/**
	 * The unimodal normal distribution crossover operator.<br>
	 * Original signature : <code>void BORG_Operator_UNDX(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 427</i><br>
	 * @deprecated use the safer methods {@link #BORG_Operator_UNDX(borg.BorgLibrary.BORG_Operator, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #BORG_Operator_UNDX(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	public static native void BORG_Operator_UNDX(Pointer undx, Pointer parents, Pointer offspring);
	/**
	 * The unimodal normal distribution crossover operator.<br>
	 * Original signature : <code>void BORG_Operator_UNDX(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 427</i>
	 */
	public static native void BORG_Operator_UNDX(BorgLibrary.BORG_Operator undx, PointerByReference parents, PointerByReference offspring);
	/**
	 * The unimodal normal distribution crossover operator.<br>
	 * Original signature : <code>void BORG_Operator_UNDX(BORG_Operator, BORG_Solution*, BORG_Solution*)</code><br>
	 * <i>native declaration : line 427</i>
	 */
	public static native void BORG_Operator_UNDX(Pointer undx, PointerByReference parents, PointerByReference offspring);
	/**
	 * Creates a new population of the specified capacity.<br>
	 * Original signature : <code>BORG_Population BORG_Population_create(int)</code><br>
	 * <i>native declaration : line 432</i>
	 */
	public static native BorgLibrary.BORG_Population BORG_Population_create(int capacity);
	/**
	 * Destroys a population and all solutions it contains.  No methods may be invoked on a population<br>
	 * after it is destroyed.<br>
	 * Original signature : <code>void BORG_Population_destroy(BORG_Population)</code><br>
	 * <i>native declaration : line 438</i><br>
	 * @deprecated use the safer methods {@link #BORG_Population_destroy(borg.BorgLibrary.BORG_Population)} and {@link #BORG_Population_destroy(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void BORG_Population_destroy(Pointer population);
	/**
	 * Destroys a population and all solutions it contains.  No methods may be invoked on a population<br>
	 * after it is destroyed.<br>
	 * Original signature : <code>void BORG_Population_destroy(BORG_Population)</code><br>
	 * <i>native declaration : line 438</i>
	 */
	public static native void BORG_Population_destroy(BorgLibrary.BORG_Population population);
	/**
	 * Adds the solution to the population, replacing a random dominated member; or if no members are<br>
	 * dominated, a random nondominated member; otherwise the solution is discarded.<br>
	 * Original signature : <code>void BORG_Population_add(BORG_Population, BORG_Solution)</code><br>
	 * <i>native declaration : line 444</i><br>
	 * @deprecated use the safer methods {@link #BORG_Population_add(borg.BorgLibrary.BORG_Population, borg.BorgLibrary.BORG_Solution)} and {@link #BORG_Population_add(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void BORG_Population_add(Pointer population, Pointer solution);
	/**
	 * Adds the solution to the population, replacing a random dominated member; or if no members are<br>
	 * dominated, a random nondominated member; otherwise the solution is discarded.<br>
	 * Original signature : <code>void BORG_Population_add(BORG_Population, BORG_Solution)</code><br>
	 * <i>native declaration : line 444</i>
	 */
	public static native void BORG_Population_add(BorgLibrary.BORG_Population population, BorgLibrary.BORG_Solution solution);
	/**
	 * Clears and resizes the population.<br>
	 * Original signature : <code>void BORG_Population_reset(BORG_Population, int)</code><br>
	 * <i>native declaration : line 449</i><br>
	 * @deprecated use the safer methods {@link #BORG_Population_reset(borg.BorgLibrary.BORG_Population, int)} and {@link #BORG_Population_reset(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native void BORG_Population_reset(Pointer population, int newCapacity);
	/**
	 * Clears and resizes the population.<br>
	 * Original signature : <code>void BORG_Population_reset(BORG_Population, int)</code><br>
	 * <i>native declaration : line 449</i>
	 */
	public static native void BORG_Population_reset(BorgLibrary.BORG_Population population, int newCapacity);
	/**
	 * Performs tournament selection on the population.<br>
	 * Original signature : <code>BORG_Solution BORG_Population_tournament(BORG_Population, int)</code><br>
	 * <i>native declaration : line 454</i><br>
	 * @deprecated use the safer methods {@link #BORG_Population_tournament(borg.BorgLibrary.BORG_Population, int)} and {@link #BORG_Population_tournament(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native BorgLibrary.BORG_Solution BORG_Population_tournament(Pointer population, int tournamentSize);
	/**
	 * Performs tournament selection on the population.<br>
	 * Original signature : <code>BORG_Solution BORG_Population_tournament(BORG_Population, int)</code><br>
	 * <i>native declaration : line 454</i>
	 */
	public static native BorgLibrary.BORG_Solution BORG_Population_tournament(BorgLibrary.BORG_Population population, int tournamentSize);
	/**
	 * Selects one or more parents from the population.<br>
	 * Original signature : <code>void BORG_Population_select(BORG_Population, int, BORG_Solution*, int)</code><br>
	 * <i>native declaration : line 459</i><br>
	 * @deprecated use the safer methods {@link #BORG_Population_select(borg.BorgLibrary.BORG_Population, int, com.sun.jna.ptr.PointerByReference, int)} and {@link #BORG_Population_select(com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	public static native void BORG_Population_select(Pointer population, int arity, Pointer parents, int tournamentSize);
	/**
	 * Selects one or more parents from the population.<br>
	 * Original signature : <code>void BORG_Population_select(BORG_Population, int, BORG_Solution*, int)</code><br>
	 * <i>native declaration : line 459</i>
	 */
	public static native void BORG_Population_select(BorgLibrary.BORG_Population population, int arity, PointerByReference parents, int tournamentSize);
	/**
	 * Selects one or more parents from the population.<br>
	 * Original signature : <code>void BORG_Population_select(BORG_Population, int, BORG_Solution*, int)</code><br>
	 * <i>native declaration : line 459</i>
	 */
	public static native void BORG_Population_select(Pointer population, int arity, PointerByReference parents, int tournamentSize);
	/**
	 * Creates a new epsilon-dominance archive.<br>
	 * Original signature : <code>BORG_Archive BORG_Archive_create()</code><br>
	 * <i>native declaration : line 464</i>
	 */
	public static native BorgLibrary.BORG_Archive BORG_Archive_create();
	/**
	 * Returns a clone of the specified epsilon-dominance archive.  The solutions contained in<br>
	 * the archive are also cloned.<br>
	 * Original signature : <code>BORG_Archive BORG_Archive_clone(BORG_Archive)</code><br>
	 * <i>native declaration : line 470</i><br>
	 * @deprecated use the safer methods {@link #BORG_Archive_clone(borg.BorgLibrary.BORG_Archive)} and {@link #BORG_Archive_clone(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native BorgLibrary.BORG_Archive BORG_Archive_clone(Pointer original);
	/**
	 * Returns a clone of the specified epsilon-dominance archive.  The solutions contained in<br>
	 * the archive are also cloned.<br>
	 * Original signature : <code>BORG_Archive BORG_Archive_clone(BORG_Archive)</code><br>
	 * <i>native declaration : line 470</i>
	 */
	public static native BorgLibrary.BORG_Archive BORG_Archive_clone(BorgLibrary.BORG_Archive original);
	/**
	 * Destroys an archive and all solutions it contains.  No methods may be invoked on the<br>
	 * archive after it is destroyed.<br>
	 * Original signature : <code>void BORG_Archive_destroy(BORG_Archive)</code><br>
	 * <i>native declaration : line 476</i><br>
	 * @deprecated use the safer methods {@link #BORG_Archive_destroy(borg.BorgLibrary.BORG_Archive)} and {@link #BORG_Archive_destroy(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void BORG_Archive_destroy(Pointer archive);
	/**
	 * Destroys an archive and all solutions it contains.  No methods may be invoked on the<br>
	 * archive after it is destroyed.<br>
	 * Original signature : <code>void BORG_Archive_destroy(BORG_Archive)</code><br>
	 * <i>native declaration : line 476</i>
	 */
	public static native void BORG_Archive_destroy(BorgLibrary.BORG_Archive archive);
	/**
	 * Adds the specified solution to the epsilon-dominance archive.  The solution will not<br>
	 * be added if the solution is dominated by existing members of the archive.<br>
	 * Original signature : <code>void BORG_Archive_add(BORG_Archive, BORG_Solution)</code><br>
	 * <i>native declaration : line 482</i><br>
	 * @deprecated use the safer methods {@link #BORG_Archive_add(borg.BorgLibrary.BORG_Archive, borg.BorgLibrary.BORG_Solution)} and {@link #BORG_Archive_add(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void BORG_Archive_add(Pointer archive, Pointer solution);
	/**
	 * Adds the specified solution to the epsilon-dominance archive.  The solution will not<br>
	 * be added if the solution is dominated by existing members of the archive.<br>
	 * Original signature : <code>void BORG_Archive_add(BORG_Archive, BORG_Solution)</code><br>
	 * <i>native declaration : line 482</i>
	 */
	public static native void BORG_Archive_add(BorgLibrary.BORG_Archive archive, BorgLibrary.BORG_Solution solution);
	/**
	 * Returns the size of the epsilon-dominance archive.<br>
	 * Original signature : <code>int BORG_Archive_get_size(BORG_Archive)</code><br>
	 * <i>native declaration : line 487</i><br>
	 * @deprecated use the safer methods {@link #BORG_Archive_get_size(borg.BorgLibrary.BORG_Archive)} and {@link #BORG_Archive_get_size(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Archive_get_size(Pointer archive);
	/**
	 * Returns the size of the epsilon-dominance archive.<br>
	 * Original signature : <code>int BORG_Archive_get_size(BORG_Archive)</code><br>
	 * <i>native declaration : line 487</i>
	 */
	public static native int BORG_Archive_get_size(BorgLibrary.BORG_Archive archive);
	/**
	 * Returns the solution at the specified index in the epsilon-dominance archive.<br>
	 * Original signature : <code>BORG_Solution BORG_Archive_get(BORG_Archive, int)</code><br>
	 * <i>native declaration : line 492</i><br>
	 * @deprecated use the safer methods {@link #BORG_Archive_get(borg.BorgLibrary.BORG_Archive, int)} and {@link #BORG_Archive_get(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native BorgLibrary.BORG_Solution BORG_Archive_get(Pointer archive, int index);
	/**
	 * Returns the solution at the specified index in the epsilon-dominance archive.<br>
	 * Original signature : <code>BORG_Solution BORG_Archive_get(BORG_Archive, int)</code><br>
	 * <i>native declaration : line 492</i>
	 */
	public static native BorgLibrary.BORG_Solution BORG_Archive_get(BorgLibrary.BORG_Archive archive, int index);
	/**
	 * Returns the number of epsilon-progress improvements recorded by the epsilon-dominance<br>
	 * archive.<br>
	 * Original signature : <code>int BORG_Archive_get_improvements(BORG_Archive)</code><br>
	 * <i>native declaration : line 498</i><br>
	 * @deprecated use the safer methods {@link #BORG_Archive_get_improvements(borg.BorgLibrary.BORG_Archive)} and {@link #BORG_Archive_get_improvements(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Archive_get_improvements(Pointer archive);
	/**
	 * Returns the number of epsilon-progress improvements recorded by the epsilon-dominance<br>
	 * archive.<br>
	 * Original signature : <code>int BORG_Archive_get_improvements(BORG_Archive)</code><br>
	 * <i>native declaration : line 498</i>
	 */
	public static native int BORG_Archive_get_improvements(BorgLibrary.BORG_Archive archive);
	/**
	 * Selects one solution uniformly at random from the archive.<br>
	 * Original signature : <code>BORG_Solution BORG_Archive_select(BORG_Archive)</code><br>
	 * <i>native declaration : line 503</i><br>
	 * @deprecated use the safer methods {@link #BORG_Archive_select(borg.BorgLibrary.BORG_Archive)} and {@link #BORG_Archive_select(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native BorgLibrary.BORG_Solution BORG_Archive_select(Pointer archive);
	/**
	 * Selects one solution uniformly at random from the archive.<br>
	 * Original signature : <code>BORG_Solution BORG_Archive_select(BORG_Archive)</code><br>
	 * <i>native declaration : line 503</i>
	 */
	public static native BorgLibrary.BORG_Solution BORG_Archive_select(BorgLibrary.BORG_Archive archive);
	/**
	 * Prints all solutions contained in the specified archive to a file stream.<br>
	 * Original signature : <code>void BORG_Archive_print(BORG_Archive, FILE*)</code><br>
	 * <i>native declaration : line 508</i><br>
	 * @deprecated use the safer methods {@link #BORG_Archive_print(borg.BorgLibrary.BORG_Archive, borg.BorgLibrary.FILE)} and {@link #BORG_Archive_print(com.sun.jna.Pointer, borg.BorgLibrary.FILE)} instead
	 */
	@Deprecated 
	public static native void BORG_Archive_print(Pointer archive, BorgLibrary.FILE fp);
	/**
	 * Prints all solutions contained in the specified archive to a file stream.<br>
	 * Original signature : <code>void BORG_Archive_print(BORG_Archive, FILE*)</code><br>
	 * <i>native declaration : line 508</i>
	 */
	public static native void BORG_Archive_print(BorgLibrary.BORG_Archive archive, BorgLibrary.FILE fp);
	/**
	 * Prints all feasible solutions in the specified archive to the specified result file.<br>
	 * Original signature : <code>void BORG_Archive_append(BORG_Archive, FILE*)</code><br>
	 * <i>native declaration : line 513</i><br>
	 * @deprecated use the safer methods {@link #BORG_Archive_append(borg.BorgLibrary.BORG_Archive, borg.BorgLibrary.FILE)} and {@link #BORG_Archive_append(com.sun.jna.Pointer, borg.BorgLibrary.FILE)} instead
	 */
	@Deprecated 
	public static native void BORG_Archive_append(Pointer archive, BorgLibrary.FILE file);
	/**
	 * Prints all feasible solutions in the specified archive to the specified result file.<br>
	 * Original signature : <code>void BORG_Archive_append(BORG_Archive, FILE*)</code><br>
	 * <i>native declaration : line 513</i>
	 */
	public static native void BORG_Archive_append(BorgLibrary.BORG_Archive archive, BorgLibrary.FILE file);
	/**
	 * Creates a new instance of the Borg algorithm.<br>
	 * Original signature : <code>BORG_Algorithm BORG_Algorithm_create(BORG_Problem, int)</code><br>
	 * <i>native declaration : line 518</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_create(borg.BorgLibrary.BORG_Problem, int)} and {@link #BORG_Algorithm_create(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native BorgLibrary.BORG_Algorithm BORG_Algorithm_create(Pointer problem, int numberOfOperators);
	/**
	 * Creates a new instance of the Borg algorithm.<br>
	 * Original signature : <code>BORG_Algorithm BORG_Algorithm_create(BORG_Problem, int)</code><br>
	 * <i>native declaration : line 518</i>
	 */
	public static native BorgLibrary.BORG_Algorithm BORG_Algorithm_create(BorgLibrary.BORG_Problem problem, int numberOfOperators);
	/**
	 * Destroys a Borg algorithm instance.  No methods may be invoked on the algorithm after it is<br>
	 * destroyed.<br>
	 * Original signature : <code>void BORG_Algorithm_destroy(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 524</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_destroy(borg.BorgLibrary.BORG_Algorithm)} and {@link #BORG_Algorithm_destroy(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void BORG_Algorithm_destroy(Pointer algorithm);
	/**
	 * Destroys a Borg algorithm instance.  No methods may be invoked on the algorithm after it is<br>
	 * destroyed.<br>
	 * Original signature : <code>void BORG_Algorithm_destroy(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 524</i>
	 */
	public static native void BORG_Algorithm_destroy(BorgLibrary.BORG_Algorithm algorithm);
	/**
	 * Validates the algorithm settings, aborting the program if invalid settings are detected.<br>
	 * Original signature : <code>void BORG_Algorithm_validate(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 529</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_validate(borg.BorgLibrary.BORG_Algorithm)} and {@link #BORG_Algorithm_validate(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void BORG_Algorithm_validate(Pointer algorithm);
	/**
	 * Validates the algorithm settings, aborting the program if invalid settings are detected.<br>
	 * Original signature : <code>void BORG_Algorithm_validate(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 529</i>
	 */
	public static native void BORG_Algorithm_validate(BorgLibrary.BORG_Algorithm algorithm);
	/**
	 * Returns the number of restarts that have occurred.<br>
	 * Original signature : <code>int BORG_Algorithm_get_number_restarts(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 534</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_get_number_restarts(borg.BorgLibrary.BORG_Algorithm)} and {@link #BORG_Algorithm_get_number_restarts(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Algorithm_get_number_restarts(Pointer algorithm);
	/**
	 * Returns the number of restarts that have occurred.<br>
	 * Original signature : <code>int BORG_Algorithm_get_number_restarts(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 534</i>
	 */
	public static native int BORG_Algorithm_get_number_restarts(BorgLibrary.BORG_Algorithm algorithm);
	/**
	 * Returns the number of epsilon-progress improvements that have occurred.<br>
	 * Original signature : <code>int BORG_Algorithm_get_number_improvements(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 539</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_get_number_improvements(borg.BorgLibrary.BORG_Algorithm)} and {@link #BORG_Algorithm_get_number_improvements(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Algorithm_get_number_improvements(Pointer algorithm);
	/**
	 * Returns the number of epsilon-progress improvements that have occurred.<br>
	 * Original signature : <code>int BORG_Algorithm_get_number_improvements(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 539</i>
	 */
	public static native int BORG_Algorithm_get_number_improvements(BorgLibrary.BORG_Algorithm algorithm);
	/**
	 * Sets the minimum number of evaluations between epsilon-progress checks.<br>
	 * Original signature : <code>void BORG_Algorithm_set_window_size(BORG_Algorithm, int)</code><br>
	 * <i>native declaration : line 544</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_set_window_size(borg.BorgLibrary.BORG_Algorithm, int)} and {@link #BORG_Algorithm_set_window_size(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native void BORG_Algorithm_set_window_size(Pointer algorithm, int windowSize);
	/**
	 * Sets the minimum number of evaluations between epsilon-progress checks.<br>
	 * Original signature : <code>void BORG_Algorithm_set_window_size(BORG_Algorithm, int)</code><br>
	 * <i>native declaration : line 544</i>
	 */
	public static native void BORG_Algorithm_set_window_size(BorgLibrary.BORG_Algorithm algorithm, int windowSize);
	/**
	 * Sets the maximum number of evaluations between epsilon-progress checks.<br>
	 * Original signature : <code>void BORG_Algorithm_set_maximum_window_size(BORG_Algorithm, int)</code><br>
	 * <i>native declaration : line 549</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_set_max_window_size(borg.BorgLibrary.BORG_Algorithm, int)} and {@link #BORG_Algorithm_set_max_window_size(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native void BORG_Algorithm_set_maximum_window_size(Pointer algorithm, int maxWindowSize);
	/**
	 * Sets the maximum number of evaluations between epsilon-progress checks.<br>
	 * Original signature : <code>void BORG_Algorithm_set_maximum_window_size(BORG_Algorithm, int)</code><br>
	 * <i>native declaration : line 549</i>
	 */
	public static native void BORG_Algorithm_set_maximum_window_size(BorgLibrary.BORG_Algorithm algorithm, int maxWindowSize);
	/**
	 * Sets the initial population size for adaptive population sizing.<br>
	 * Original signature : <code>void BORG_Algorithm_set_initial_population_size(BORG_Algorithm, int)</code><br>
	 * <i>native declaration : line 554</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_set_initial_population_size(borg.BorgLibrary.BORG_Algorithm, int)} and {@link #BORG_Algorithm_set_initial_population_size(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native void BORG_Algorithm_set_initial_population_size(Pointer algorithm, int initialPopulationSize);
	/**
	 * Sets the initial population size for adaptive population sizing.<br>
	 * Original signature : <code>void BORG_Algorithm_set_initial_population_size(BORG_Algorithm, int)</code><br>
	 * <i>native declaration : line 554</i>
	 */
	public static native void BORG_Algorithm_set_initial_population_size(BorgLibrary.BORG_Algorithm algorithm, int initialPopulationSize);
	/**
	 * Sets the minimum population size for adaptive population sizing.<br>
	 * Original signature : <code>void BORG_Algorithm_set_minimum_population_size(BORG_Algorithm, int)</code><br>
	 * <i>native declaration : line 559</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_set_minimum_population_size(borg.BorgLibrary.BORG_Algorithm, int)} and {@link #BORG_Algorithm_set_minimum_population_size(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native void BORG_Algorithm_set_minimum_population_size(Pointer algorithm, int minimumPopulationSize);
	/**
	 * Sets the minimum population size for adaptive population sizing.<br>
	 * Original signature : <code>void BORG_Algorithm_set_minimum_population_size(BORG_Algorithm, int)</code><br>
	 * <i>native declaration : line 559</i>
	 */
	public static native void BORG_Algorithm_set_minimum_population_size(BorgLibrary.BORG_Algorithm algorithm, int minimumPopulationSize);
	/**
	 * Sets the maximum population size for adaptive population sizing.<br>
	 * Original signature : <code>void BORG_Algorithm_set_maximum_population_size(BORG_Algorithm, int)</code><br>
	 * <i>native declaration : line 564</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_set_maximum_population_size(borg.BorgLibrary.BORG_Algorithm, int)} and {@link #BORG_Algorithm_set_maximum_population_size(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native void BORG_Algorithm_set_maximum_population_size(Pointer algorithm, int maximumPopulationSize);
	/**
	 * Sets the maximum population size for adaptive population sizing.<br>
	 * Original signature : <code>void BORG_Algorithm_set_maximum_population_size(BORG_Algorithm, int)</code><br>
	 * <i>native declaration : line 564</i>
	 */
	public static native void BORG_Algorithm_set_maximum_population_size(BorgLibrary.BORG_Algorithm algorithm, int maximumPopulationSize);
	/**
	 * Sets the population-to-archive ratio for adaptive population sizing.<br>
	 * Original signature : <code>void BORG_Algorithm_set_population_ratio(BORG_Algorithm, double)</code><br>
	 * <i>native declaration : line 569</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_set_population_ratio(borg.BorgLibrary.BORG_Algorithm, double)} and {@link #BORG_Algorithm_set_population_ratio(com.sun.jna.Pointer, double)} instead
	 */
	@Deprecated 
	public static native void BORG_Algorithm_set_population_ratio(Pointer algorithm, double populationRatio);
	/**
	 * Sets the population-to-archive ratio for adaptive population sizing.<br>
	 * Original signature : <code>void BORG_Algorithm_set_population_ratio(BORG_Algorithm, double)</code><br>
	 * <i>native declaration : line 569</i>
	 */
	public static native void BORG_Algorithm_set_population_ratio(BorgLibrary.BORG_Algorithm algorithm, double populationRatio);
	/**
	 * Sets the ratio of the tournament selection size to the population size.<br>
	 * Original signature : <code>void BORG_Algorithm_set_selection_ratio(BORG_Algorithm, double)</code><br>
	 * <i>native declaration : line 574</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_set_selection_ratio(borg.BorgLibrary.BORG_Algorithm, double)} and {@link #BORG_Algorithm_set_selection_ratio(com.sun.jna.Pointer, double)} instead
	 */
	@Deprecated 
	public static native void BORG_Algorithm_set_selection_ratio(Pointer algorithm, double selectionRatio);
	/**
	 * Sets the ratio of the tournament selection size to the population size.<br>
	 * Original signature : <code>void BORG_Algorithm_set_selection_ratio(BORG_Algorithm, double)</code><br>
	 * <i>native declaration : line 574</i>
	 */
	public static native void BORG_Algorithm_set_selection_ratio(BorgLibrary.BORG_Algorithm algorithm, double selectionRatio);
	/**
	 * Sets the restart mode.<br>
	 * Original signature : <code>void BORG_Algorithm_set_restart_mode(BORG_Algorithm, BORG_Restart)</code><br>
	 * <i>native declaration : line 579</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_set_restart_mode(borg.BorgLibrary.BORG_Algorithm, int)} and {@link #BORG_Algorithm_set_restart_mode(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native void BORG_Algorithm_set_restart_mode(Pointer algorithm, int restartMode);
	/**
	 * Sets the restart mode.<br>
	 * Original signature : <code>void BORG_Algorithm_set_restart_mode(BORG_Algorithm, BORG_Restart)</code><br>
	 * <i>native declaration : line 579</i>
	 */
	public static native void BORG_Algorithm_set_restart_mode(BorgLibrary.BORG_Algorithm algorithm, int restartMode);
	/**
	 * Set the operator probability update mode.<br>
	 * Original signature : <code>void BORG_Algorithm_set_probability_mode(BORG_Algorithm, BORG_Probabilities)</code><br>
	 * <i>native declaration : line 584</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_set_probability_mode(borg.BorgLibrary.BORG_Algorithm, int)} and {@link #BORG_Algorithm_set_probability_mode(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native void BORG_Algorithm_set_probability_mode(Pointer algorithm, int probilityMode);
	/**
	 * Set the operator probability update mode.<br>
	 * Original signature : <code>void BORG_Algorithm_set_probability_mode(BORG_Algorithm, BORG_Probabilities)</code><br>
	 * <i>native declaration : line 584</i>
	 */
	public static native void BORG_Algorithm_set_probability_mode(BorgLibrary.BORG_Algorithm algorithm, int probilityMode);
	/**
	 * Returns the current mutation index when adaptive mutation is used.<br>
	 * Original signature : <code>int BORG_Algorithm_get_mutation_index(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 589</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_get_mutation_index(borg.BorgLibrary.BORG_Algorithm)} and {@link #BORG_Algorithm_get_mutation_index(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Algorithm_get_mutation_index(Pointer algorithm);
	/**
	 * Returns the current mutation index when adaptive mutation is used.<br>
	 * Original signature : <code>int BORG_Algorithm_get_mutation_index(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 589</i>
	 */
	public static native int BORG_Algorithm_get_mutation_index(BorgLibrary.BORG_Algorithm algorithm);
	/**
	 * Sets the max mutation index when adaptive mutation is used.  This determine the number of<br>
	 * intermediate mutation probabilities between 1/L and 100%.<br>
	 * Original signature : <code>void BORG_Algorithm_set_max_mutation_index(BORG_Algorithm, int)</code><br>
	 * <i>native declaration : line 595</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_set_max_mutation_index(borg.BorgLibrary.BORG_Algorithm, int)} and {@link #BORG_Algorithm_set_max_mutation_index(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native void BORG_Algorithm_set_max_mutation_index(Pointer algorithm, int maxMutationIndex);
	/**
	 * Sets the max mutation index when adaptive mutation is used.  This determine the number of<br>
	 * intermediate mutation probabilities between 1/L and 100%.<br>
	 * Original signature : <code>void BORG_Algorithm_set_max_mutation_index(BORG_Algorithm, int)</code><br>
	 * <i>native declaration : line 595</i>
	 */
	public static native void BORG_Algorithm_set_max_mutation_index(BorgLibrary.BORG_Algorithm algorithm, int maxMutationIndex);
	/**
	 * Assigns one of the variation operators used by the Borg algorithm.<br>
	 * Original signature : <code>void BORG_Algorithm_set_operator(BORG_Algorithm, int, BORG_Operator)</code><br>
	 * <i>native declaration : line 600</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_set_operator(borg.BorgLibrary.BORG_Algorithm, int, borg.BorgLibrary.BORG_Operator)} and {@link #BORG_Algorithm_set_operator(com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void BORG_Algorithm_set_operator(Pointer algorithm, int index, Pointer variation);
	/**
	 * Assigns one of the variation operators used by the Borg algorithm.<br>
	 * Original signature : <code>void BORG_Algorithm_set_operator(BORG_Algorithm, int, BORG_Operator)</code><br>
	 * <i>native declaration : line 600</i>
	 */
	public static native void BORG_Algorithm_set_operator(BorgLibrary.BORG_Algorithm algorithm, int index, BorgLibrary.BORG_Operator variation);
	/**
	 * Updates the operator selection probabilities.<br>
	 * Original signature : <code>void BORG_Algorithm_update(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 605</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_update(borg.BorgLibrary.BORG_Algorithm)} and {@link #BORG_Algorithm_update(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void BORG_Algorithm_update(Pointer algorithm);
	/**
	 * Updates the operator selection probabilities.<br>
	 * Original signature : <code>void BORG_Algorithm_update(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 605</i>
	 */
	public static native void BORG_Algorithm_update(BorgLibrary.BORG_Algorithm algorithm);
	/**
	 * Returns the index of the operator selected for auto-adaptive multioperator search.<br>
	 * Original signature : <code>int BORG_Algorithm_select(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 610</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_select(borg.BorgLibrary.BORG_Algorithm)} and {@link #BORG_Algorithm_select(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Algorithm_select(Pointer algorithm);
	/**
	 * Returns the index of the operator selected for auto-adaptive multioperator search.<br>
	 * Original signature : <code>int BORG_Algorithm_select(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 610</i>
	 */
	public static native int BORG_Algorithm_select(BorgLibrary.BORG_Algorithm algorithm);
	/**
	 * Randomly shuffles the array of solutions.<br>
	 * Original signature : <code>void BORG_Algorithm_shuffle(int, BORG_Solution*)</code><br>
	 * <i>native declaration : line 615</i><br>
	 * @deprecated use the safer method {@link #BORG_Algorithm_shuffle(int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	public static native void BORG_Algorithm_shuffle(int numberOfParents, Pointer parents);
	/**
	 * Randomly shuffles the array of solutions.<br>
	 * Original signature : <code>void BORG_Algorithm_shuffle(int, BORG_Solution*)</code><br>
	 * <i>native declaration : line 615</i>
	 */
	public static native void BORG_Algorithm_shuffle(int numberOfParents, PointerByReference parents);
	/**
	 * Performs a restart with injection.<br>
	 * Original signature : <code>void BORG_Algorithm_restart(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 620</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_restart(borg.BorgLibrary.BORG_Algorithm)} and {@link #BORG_Algorithm_restart(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void BORG_Algorithm_restart(Pointer algorithm);
	/**
	 * Performs a restart with injection.<br>
	 * Original signature : <code>void BORG_Algorithm_restart(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 620</i>
	 */
	public static native void BORG_Algorithm_restart(BorgLibrary.BORG_Algorithm algorithm);
	/**
	 * Checks if the conditions for epsilon-progress are satisfied, returning true<br>
	 * if a restart should occur; false otherwise.<br>
	 * Original signature : <code>int BORG_Algorithm_check(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 626</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_check(borg.BorgLibrary.BORG_Algorithm)} and {@link #BORG_Algorithm_check(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Algorithm_check(Pointer algorithm);
	/**
	 * Checks if the conditions for epsilon-progress are satisfied, returning true<br>
	 * if a restart should occur; false otherwise.<br>
	 * Original signature : <code>int BORG_Algorithm_check(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 626</i>
	 */
	public static native int BORG_Algorithm_check(BorgLibrary.BORG_Algorithm algorithm);
	/**
	 * Performs one logical step of the Borg algorithm.<br>
	 * Original signature : <code>void BORG_Algorithm_step(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 631</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_step(borg.BorgLibrary.BORG_Algorithm)} and {@link #BORG_Algorithm_step(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void BORG_Algorithm_step(Pointer algorithm);
	/**
	 * Performs one logical step of the Borg algorithm.<br>
	 * Original signature : <code>void BORG_Algorithm_step(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 631</i>
	 */
	public static native void BORG_Algorithm_step(BorgLibrary.BORG_Algorithm algorithm);
	/**
	 * Returns the number of objective function evaluations expended by the Borg algorithm.<br>
	 * Original signature : <code>int BORG_Algorithm_get_nfe(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 636</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_get_nfe(borg.BorgLibrary.BORG_Algorithm)} and {@link #BORG_Algorithm_get_nfe(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Algorithm_get_nfe(Pointer algorithm);
	/**
	 * Returns the number of objective function evaluations expended by the Borg algorithm.<br>
	 * Original signature : <code>int BORG_Algorithm_get_nfe(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 636</i>
	 */
	public static native int BORG_Algorithm_get_nfe(BorgLibrary.BORG_Algorithm algorithm);
	/**
	 * Returns the size of the population.<br>
	 * Original signature : <code>int BORG_Algorithm_get_population_size(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 641</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_get_population_size(borg.BorgLibrary.BORG_Algorithm)} and {@link #BORG_Algorithm_get_population_size(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Algorithm_get_population_size(Pointer algorithm);
	/**
	 * Returns the size of the population.<br>
	 * Original signature : <code>int BORG_Algorithm_get_population_size(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 641</i>
	 */
	public static native int BORG_Algorithm_get_population_size(BorgLibrary.BORG_Algorithm algorithm);
	/**
	 * Returns the size of the archive.<br>
	 * Original signature : <code>int BORG_Algorithm_get_archive_size(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 646</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_get_archive_size(borg.BorgLibrary.BORG_Algorithm)} and {@link #BORG_Algorithm_get_archive_size(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int BORG_Algorithm_get_archive_size(Pointer algorithm);
	/**
	 * Returns the size of the archive.<br>
	 * Original signature : <code>int BORG_Algorithm_get_archive_size(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 646</i>
	 */
	public static native int BORG_Algorithm_get_archive_size(BorgLibrary.BORG_Algorithm algorithm);
	/**
	 * Returns the Pareto approximation set discovered by the Borg algorithm.<br>
	 * Original signature : <code>BORG_Archive BORG_Algorithm_get_result(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 651</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_get_result(borg.BorgLibrary.BORG_Algorithm)} and {@link #BORG_Algorithm_get_result(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native BorgLibrary.BORG_Archive BORG_Algorithm_get_result(Pointer algorithm);
	/**
	 * Returns the Pareto approximation set discovered by the Borg algorithm.<br>
	 * Original signature : <code>BORG_Archive BORG_Algorithm_get_result(BORG_Algorithm)</code><br>
	 * <i>native declaration : line 651</i>
	 */
	public static native BorgLibrary.BORG_Archive BORG_Algorithm_get_result(BorgLibrary.BORG_Algorithm algorithm);
	/**
	 * Performs a complete run of the Borg algorithm.<br>
	 * Original signature : <code>BORG_Archive BORG_Algorithm_run(BORG_Problem, int)</code><br>
	 * <i>native declaration : line 656</i><br>
	 * @deprecated use the safer methods {@link #BORG_Algorithm_run(borg.BorgLibrary.BORG_Problem, int)} and {@link #BORG_Algorithm_run(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native BorgLibrary.BORG_Archive BORG_Algorithm_run(Pointer problem, int maxEvaluations);
	/**
	 * Performs a complete run of the Borg algorithm.<br>
	 * Original signature : <code>BORG_Archive BORG_Algorithm_run(BORG_Problem, int)</code><br>
	 * <i>native declaration : line 656</i>
	 */
	public static native BorgLibrary.BORG_Archive BORG_Algorithm_run(BorgLibrary.BORG_Problem problem, int maxEvaluations);
	public static class BORG_Archive extends PointerType {
		public BORG_Archive(Pointer address) {
			super(address);
		}
		public BORG_Archive() {
			super();
		}
	};
	public static class BORG_Solution extends PointerType {
		public BORG_Solution(Pointer address) {
			super(address);
		}
		public BORG_Solution() {
			super();
		}
	};
	public static class BORG_Operator extends PointerType {
		public BORG_Operator(Pointer address) {
			super(address);
		}
		public BORG_Operator() {
			super();
		}
	};
	public static class FILE extends PointerType {
		public FILE(Pointer address) {
			super(address);
		}
		public FILE() {
			super();
		}
	};
	public static class BORG_Algorithm extends PointerType {
		public BORG_Algorithm(Pointer address) {
			super(address);
		}
		public BORG_Algorithm() {
			super();
		}
	};
	public static class BORG_Population extends PointerType {
		public BORG_Population(Pointer address) {
			super(address);
		}
		public BORG_Population() {
			super();
		}
	};
	public static class BORG_Problem extends PointerType {
		public BORG_Problem(Pointer address) {
			super(address);
		}
		public BORG_Problem() {
			super();
		}
	};
}
